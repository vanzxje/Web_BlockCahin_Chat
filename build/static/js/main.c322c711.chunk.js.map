{"version":3,"sources":["components/arrow.png","components/Chat.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","Chat","_Component","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","state","fixedChats","msg","response","chats","inputValue","accounts","account","nbBlocks","otherAccount","accountNbTransactions","otherAccountNbTransactions","accountBalance","otherAccountBalance","lastGas","blockHash","didATransaction","isLastTransactionSuccess","didARequest","accountRequesting","accountRequested","valueRequested","_inherits","_createClass","key","_componentWillMount","_asyncToGenerator","_callee","_context","loadWeb3","loadBlockchainData","listenToMessages","listenToEther","listenToAskEther","listenToFetchAllMsg","fetchAllMsg","updateUIData","apply","arguments","_loadWeb","_callee2","_context2","window","ethereum","web3","Web3","providers","WebsocketProvider","enable","currentProvider","alert","_loadBlockchainData","_callee3","ethBalance","networkId","chatAppData","abi","chatContract","_context3","eth","getAccounts","setState","console","log","getBalance","net","getId","ChatApp","networks","Contract","address","_listenToMessages","_callee4","binded","_context4","didReceiveMessageBinded","bind","events","messageSentEvent","on","error","_listenToEther","_callee5","_context5","didReceiveEtherBinded","etherSentEvent","_listenToAskEther","_callee6","_context6","didReceiveAskEtherBinded","etherAskEvent","_listenToFetchAllMsg","_callee7","_context7","didReceiveAllMsgBinded","messagesFetchedEvent","_didReceiveMessageBinded","_callee8","event","message","_context8","returnValues","from","didReceiveMessage","to","_x","_didReceiveEtherBinded","_callee9","_context9","success","_x2","_didReceiveAskEtherBinded","_callee10","value_as_wei","_context10","utils","fromWei","_x3","_didReceiveAllMsgBinded","_callee11","allMsg","_this2","_context11","messages","_x4","_didReceiveMessage","_callee12","isResponse","_context12","_x5","_x6","_didSendMessage","_callee13","_context13","methods","sendMsg","send","gas","sendEtherIfAsked","askEtherIfAsked","_x7","_sendEtherIfAsked","_callee14","splitted","asWei","_context14","split","isNumeric","parseFloat","sendEther","_askEtherIfAsked","_callee15","_context15","toString","askEther","_fetchAllMsg","_callee16","_context16","getAllMsg","_updateUIData","_callee17","_context17","updateNbTransactions","updateBalances","updateBlocks","updateLastGas","evt","target","_updateAddressSelect","_callee18","newValue","isOtherAccount","_context18","wait","_x8","_x9","_updateNbTransactions","_callee19","_context19","getTransactionCount","_updateBalances","_callee20","_context20","_updateBlocks","_callee21","latest","_context21","getBlockNumber","_updateLastGas","_callee22","lastBlockNumber","block","lastTransaction","transaction","_context22","getBlock","transactions","getTransaction","map","x","React","createElement","class","addresses","selected","style","color","_this3","valueAsEther","valueAsWei","className","onClick","str","_wait","_callee23","_context23","_this4","src","mainLogo","alt","onChange","updateAddressSelect","getToggleAdresses","getMessagesAsDivs","fontSize","aria-hidden","updateInputValue","placeholder","didSendMessage","displayEtherTransactionStatus","displayAskEtherPopUp","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c322c711.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.11152e05.png\";","import Web3 from 'web3';\nimport React, { Component } from 'react';\nimport ChatApp from '../abis/ChatApp.json'\nimport mainLogo from './arrow.png'\n\nclass Chat extends Component {\n\n    async componentWillMount() {\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n        await this.listenToMessages()\n        await this.listenToEther()\n        await this.listenToAskEther()\n        await this.listenToFetchAllMsg()\n        await this.fetchAllMsg()\n        await this.updateUIData()\n      }\n\n    constructor(props) {\n        super(props)\n        let chats = [\n            {\n                msg: \"This is a blockchain demo, try to tap in!\",\n                response: true\n            },\n            {\n                msg: \"Enter \\\"send_ether: 0.0001\\\" to send some tokens to your recipient 😃\",\n                response: false\n            }\n        ]\n        this.state = {\n            fixedChats: chats,\n            chats: [],\n            inputValue: '',\n            accounts: [],\n            account: '',\n            nbBlocks: 0,\n            otherAccount: '',\n            accountNbTransactions: 0,\n            otherAccountNbTransactions: 0,\n            accountBalance: 0,\n            otherAccountBalance: 0,\n            lastGas: 0,\n            blockHash: '',\n            didATransaction: false,\n            isLastTransactionSuccess: false,\n            didARequest: false,\n            accountRequesting: '',\n            accountRequested: '',\n            valueRequested: 0,\n        }\n    }\n\n    // ------- init ------\n    async loadWeb3() {\n        if (window.ethereum) {\n    \n          // Need to put ws:// instead of http:// because of web sockets.\n          // Web sockets are mandatory to listen to events.\n          window.web3 = new Web3(Web3.providers.WebsocketProvider(\"ws://localhost:7545\"))\n          await window.ethereum.enable()\n        }\n        else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n        }\n        else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n        }\n      }\n\n    async loadBlockchainData()  {\n        const web3 = window.web3\n    \n        const accounts = await web3.eth.getAccounts()\n        this.setState({ \n            accounts: accounts,\n            account: accounts[0],\n            otherAccount: accounts[1]\n         })\n        console.log(accounts)\n    \n        const ethBalance = await web3.eth.getBalance(this.state.account)\n        this.setState({ ethBalance })\n    \n        // Load smart contract\n        const networkId =  await web3.eth.net.getId()\n        const chatAppData = ChatApp.networks[networkId]\n        const abi = ChatApp.abi\n        if(chatAppData) {\n          const chatContract = new web3.eth.Contract(abi, chatAppData.address)\n          this.setState({ chatContract: chatContract })\n        }\n        else {\n            window.alert('Chat contract not deployed to detected network.')\n        }\n    }\n\n    // ------- listeners ------\n    async listenToMessages() {\n        var binded = this.didReceiveMessageBinded.bind(this)\n        this.state.chatContract.events.messageSentEvent({})\n        .on('data', binded)\n        .on('error', console.error);\n    }\n\n    async listenToEther() {\n        var binded = this.didReceiveEtherBinded.bind(this)\n        this.state.chatContract.events.etherSentEvent({})\n        .on('data', binded)\n        .on('error', console.error);\n    }\n\n    async listenToAskEther() {\n        var binded = this.didReceiveAskEtherBinded.bind(this)\n        this.state.chatContract.events.etherAskEvent({})\n        .on('data', binded)\n        .on('error', console.error);\n    }\n\n    async listenToFetchAllMsg() {\n        var binded = this.didReceiveAllMsgBinded.bind(this)\n        this.state.chatContract.events.messagesFetchedEvent({})\n        .on('data', binded)\n        .on('error', console.error);\n    }\n\n    // ------- handlers ------\n    async didReceiveMessageBinded(event){\n        const message = event.returnValues.message\n        if (event.returnValues.from === this.state.account){\n            this.didReceiveMessage(message, true)\n        }\n        if (event.returnValues.to === this.state.account){\n            this.didReceiveMessage(message, false)\n        }\n        this.setState({\n            didATransaction: false,\n            didARequest: false,\n        })\n        await this.updateUIData()\n    }\n\n    async didReceiveEtherBinded(event) {\n        this.setState({\n            didATransaction: true,\n            didARequest: false,\n            isLastTransactionSuccess: event.returnValues.success\n        })\n        // await this.wait()\n        await this.updateUIData()\n    }\n\n    async didReceiveAskEtherBinded(event){\n        if (this.state.account === event.returnValues.to) {\n            let value_as_wei = window.web3.utils.fromWei(\n                event.returnValues.value, \"ether\")\n    \n            this.setState({\n                didATransaction: false,\n                didARequest: true,\n                accountRequesting: event.returnValues.from,\n                accountRequested: event.returnValues.to,\n                valueRequested: value_as_wei,\n            })\n            await this.updateUIData()\n        }\n    }\n\n    async didReceiveAllMsgBinded(event){\n        let allMsg = []\n\n        event.returnValues.messages.forEach((message) => {\n            allMsg.push({\n                msg: message['message'],\n                response: message['from'] === this.state.account\n            })\n        })\n        if (allMsg.length === 0)\n            allMsg = this.state.fixedChats\n\n        this.setState({\n            chats: allMsg\n        })\n        await this.updateUIData()\n    }\n\n    async didReceiveMessage(message, isResponse) {\n        let chats = this.state.chats\n        chats.push(\n            {\n                msg: message,\n                response: isResponse\n            }\n        )\n        this.setState({\n            chats: chats,\n            inputValue: ''\n        })\n    }\n\n    async didSendMessage(message) {\n        this.state.chatContract.methods.sendMsg(this.state.otherAccount, message)\n            .send({ from: this.state.account, gas: 1500000 })\n        await this.sendEtherIfAsked()\n        await this.askEtherIfAsked()\n    }\n\n    async sendEtherIfAsked() {\n        let splitted = this.state.inputValue.split(':')\n        if (splitted.length !== 2)\n            return false\n\n        if (splitted[0] === \"send_ether\" && this.isNumeric(splitted[1])) {\n            let asWei = parseFloat(splitted[1]) * 1e18\n            this.state.chatContract.methods.sendEther(this.state.otherAccount).send({\n                from: this.state.account,\n                value: asWei\n            })\n            return true\n        }\n        return false\n    }\n\n    async askEtherIfAsked() {\n        let splitted = this.state.inputValue.split(':')\n        if (splitted.length !== 2)\n            return false\n\n        if (splitted[0] === \"ask_ether\" && this.isNumeric(splitted[1])) {\n            var asWei = (parseFloat(splitted[1]) * 1e18).toString()\n            this.state.chatContract.methods.askEther(this.state.otherAccount, asWei).send({ from: this.state.account })\n            return true\n        }\n        return false\n    }\n\n    async fetchAllMsg() {\n        await this.state.chatContract.methods.getAllMsg(this.state.otherAccount).send({ from: this.state.account })\n    }\n\n    // ------- UI state updaters ------\n    async updateUIData() {\n        await this.updateNbTransactions()\n        await this.updateBalances()\n        await this.updateBlocks()\n        await this.updateLastGas()\n    }\n\n    updateInputValue(evt) {\n        this.setState({\n          inputValue: evt.target.value\n        });\n      }\n\n    async updateAddressSelect(newValue, isOtherAccount) {\n        if (isOtherAccount) {\n            this.setState({\n                otherAccount: newValue,\n                chats: this.state.fixedChats\n            })\n        }\n        else {\n            this.setState({\n                account: newValue,\n                chats: this.state.fixedChats\n            })\n        }\n        await this.wait()\n        await this.fetchAllMsg()\n        await this.updateUIData()\n    }\n\n    async updateNbTransactions() {\n        let accountNbTransactions = await window.web3.eth.getTransactionCount(this.state.account)\n        let otherAccountNbTransactions = await window.web3.eth.getTransactionCount(this.state.otherAccount)\n        this.setState({\n            accountNbTransactions: accountNbTransactions,\n            otherAccountNbTransactions: otherAccountNbTransactions\n        })\n    }\n\n    async updateBalances() {\n        let accountBalance = await window.web3.eth.getBalance(this.state.account)\n        let otherAccountBalance = await window.web3.eth.getBalance(this.state.otherAccount)\n        this.setState({\n            accountBalance: window.web3.utils.fromWei(accountBalance, 'ether'),\n            otherAccountBalance: window.web3.utils.fromWei(otherAccountBalance, 'ether')\n        })\n    }\n\n    async updateBlocks() {\n        const latest = await window.web3.eth.getBlockNumber()\n        this.setState({\n            nbBlocks: latest\n        })\n    }\n\n    async updateLastGas() {\n        const lastBlockNumber = await window.web3.eth.getBlockNumber();\n        let block = await window.web3.eth.getBlock(lastBlockNumber);\n        block = await window.web3.eth.getBlock(lastBlockNumber);\n\n        const lastTransaction = block.transactions[block.transactions.length - 1];\n        const transaction = await window.web3.eth.getTransaction(lastTransaction);\n\n        this.setState({\n            blockHash: transaction[\"blockHash\"],\n            lastGas: transaction[\"gas\"],\n        })\n    }\n\n    // ------- UI ------\n    getMessagesAsDivs() {\n        let chatDivs = this.state.chats.map(x => x.response ? \n            <div class=\"message text-only\">\n                <div class=\"response\">\n                    <p class=\"text\"> {x.msg} </p>\n                    </div>\n                </div> :\n            <div class=\"message text-only\">\n                <p class=\"text\"> {x.msg} </p>\n            </div>\n        )\n        return chatDivs.reverse()\n    }\n\n    getToggleAdresses(isOtherAccount) {\n        var addresses = []\n        for (var i = 0; i < this.state.accounts.length; i++) {\n            let account = this.state.accounts[i]\n            if ((isOtherAccount && account) === this.state.otherAccount\n                || (!isOtherAccount && account) === this.state.account)\n                addresses.push(<option value={account} selected>{account}</option>)\n            else {\n                addresses.push(<option value={account}>{account}</option>)\n            }\n        }\n        return addresses\n    }\n\n    displayEtherTransactionStatus() {\n        if (!this.state.didATransaction)\n            return\n\n        if (this.state.isLastTransactionSuccess)\n            return <div style={{color: \"green\"}}>ETH transaction succeeded!</div>\n        else\n            return <div>error</div>\n    }\n\n    displayAskEtherPopUp() {\n        let to = this.state.accountRequested\n        let valueAsEther = this.state.valueRequested\n        let valueAsWei = parseFloat(this.state.valueRequested) * 1e18\n        \n        if (this.state.didARequest && to === this.state.account) {\n            return (\n            <div className=\"didAskContainer\">\n                <h6>Ether request</h6>\n                <p>Account { to } requests you { valueAsEther } ether.</p>\n                \n                <button class=\"btn btn-success send-btn\" onClick={() => this.state.chatContract.methods.sendEther(this.state.accountRequesting).send({\n                    from: to,\n                    value: valueAsWei\n                })}>Accept</button>\n            </div>\n            )\n        }\n        return\n    }\n\n    // ------- helpers ------\n    isNumeric(str) {\n        if (typeof str != \"string\") return false\n        return !isNaN(str) &&\n               !isNaN(parseFloat(str))\n      }\n\n    async wait() {\n        const noop = ()=>{};\n        for (var i = 0; i < 10000; i++)\n            noop()\n    }\n\n    // ------- rendering ------\n    render() {\n        return (\n        <body>\n            <div class=\"block-container\">\n                <div class=\"row\">\n                    <div class=\"col-7 left-block\">\n                        <section class=\"chat\">\n                            <div class=\"header-chat\">\n                                <div class=\"left\">\n                                <img src={mainLogo} className=\"arrow\" alt=\"Main logo\"/>\n                                    <select class=\"custom-select\" onChange={e => this.updateAddressSelect(e.target.value, false)} >\n                                        { this.getToggleAdresses(false) }\n                                    </select>     \n                                </div>\n                                <div class=\"right\">\n                                    <select class=\"custom-select\" onChange={e => this.updateAddressSelect(e.target.value, true)} >\n                                        { this.getToggleAdresses(true) }\n                                    </select>  \n                                </div>\n                            </div>\n                            <div class=\"messages-chat\">\n                            { this.getMessagesAsDivs() }\n                            </div>\n                        </section>\n                        <div class=\"footer-chat\">\n                            <i class=\"icon fa fa-smile-o clickable\" style={{fontSize: \"25pt\"}} aria-hidden=\"true\"></i>\n                            <input value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} type=\"text\" class=\"write-message\" placeholder=\"Type your message here\"></input>\n                            <i class=\"icon send fa fa-paper-plane-o clickable\" aria-hidden=\"true\"></i>\n                            <button class=\"btn btn-success send-btn\" onClick={() => this.didSendMessage(this.state.inputValue)}>Send</button>\n                        </div>\n                    </div>\n                    <div class=\"col-5 right-block\">\n                        <h3>Blockchain state</h3>\n                        <p>Number of blocks: { this.state.nbBlocks }</p>\n                        <p>Last transaction gas: { this.state.lastGas }</p>\n                        <div class=\"sender-block blockchain-block\">\n                            <p><b>Sender address:</b></p>\n                            <p>{ this.state.account }</p>\n                            <p>Number of transactions: { this.state.accountNbTransactions }</p>\n                            <p>Wallet balance: { this.state.accountBalance } ETH</p>\n                        </div>\n                        <div class=\"recip-block blockchain-block\">\n                            <p><b>Recipient address:</b></p>\n                            <p>{ this.state.otherAccount }</p>\n                            <p>Number of transactions: { this.state.otherAccountNbTransactions }</p>\n                            <p>Wallet balance: { this.state.otherAccountBalance } ETH</p>\n                        </div>\n\n                        <div class=\"alert-transac\">\n                            { this.displayEtherTransactionStatus() }\n                        </div>\n                        <div class=\"alert-request\">\n                            { this.displayAskEtherPopUp() }\n                        </div>\n                        \n                    </div>\n                </div>\n                \n                </div>\n        </body>)\n    }\n\n}\n\nexport default Chat;","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from \"./Chat\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Chat></Chat>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}